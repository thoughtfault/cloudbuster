package org.example;

import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2ClientBuilder;
import com.amazonaws.services.ec2.model.*;
import com.jcraft.jsch.*;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.example.Helpers.print;

/**
 * This class contains all the methods related to building, configuring, and destroying infrastructure
 */
public class Infrastructure {
    private String region;
    private final String tagKey = "tag:name";
    private final String tagValue = "AUTO-GENERATED BY CLOUDBUSTER";
    private static AmazonEC2 ec2Client;
    private final String cidr = "172.31.0.0/16";
    private String vpcId;
    private String subnetId;
    public String keyName = "CLOUDBUSTER";
    private String securityGroupName = "CLOUDBUSTER";
    private String userData = "sudo apt update -y; sudo apt update -y; sudo apt install openjdk-17-jdk openjdk-17-jre -y; sudo chown :ubuntu /opt; sudo chmod g+w /opt; echo -e \"[Unit]\\nDescription=Jarbuster\\n\\n[Service]\\nType=simple\\nExecStart=java -jar /home/ubuntu/jarbuster.jar\\nStandardOutput=/var/log/jarbuster.log\\nStandardError=/var/log/jarbuster.log\\n\\n[Install]\\nWantedBy=multi-user.target\" | sudo tee /lib/systemd/system/jarbuster.service; sudo systemctl daemon-reload; sudo sed -i 's/#PermitRootLogin.*/PermitRootLogin without-password/g' /etc/ssh/sshd_config; cat /home/ubuntu/.ssh/authorized_keys | sudo tee /root/.ssh/authorized_keys; sudo rm -f /opt/*.txt; sudo systemctl enable --now jarbuster";
    private ArrayList<String> addresses;

    public Infrastructure(String region) {
        this.region = region;

        this.ec2Client = AmazonEC2ClientBuilder.standard().withRegion(region).build();
    }

    /**
     * This method gets the public ip addresses of running worker nodes
     * @return
     */
    public ArrayList<String> getAddresses() {
        if (addresses != null) {
            return addresses;
        }

        DescribeInstancesResult describeInstancesResult = ec2Client.describeInstances(
                new DescribeInstancesRequest()
                        .withInstanceIds(describeInstances("running"))
        );
        ArrayList<String> runningAddresses = new ArrayList<>();
        for (Reservation reservation : describeInstancesResult.getReservations()) {
            for (Instance instance : reservation.getInstances()) {
                runningAddresses.add(instance.getPublicIpAddress());
            }
        }
        return runningAddresses;
    }

    /**
     * This method creates and configures network and endpoint infrastructure
     */
    public void create() {

        print("Creating infrastructure in " + region, 0);

        createNetwork();
        createEndpoints();

        configureEndpoints();
        print("Finished creating infrastructure for " + region, 0);
    }

    /**
     * This method destroyes network and endpoint infrastructure
     */
    public void destroy() {
        print("Destroying infrastructure in " + region, 0);

        destroyEndpoints();
        destroyNetwork();

        print("Finished destroying infrastructure in " + region, 0);
    }

    public void stop() {
        stopEndpoints();
    }

    public void start() {
        startEndpoints();
    }

    /**
     * This method configures the vpc, subnet, and routing
     */
    private void createNetwork() {

        if (!alreadyCreated(ResourceType.Vpc)) {
            print("Creating VPC in " + region, 0);
            CreateVpcResult vpcResult = ec2Client.createVpc(
                    new CreateVpcRequest()
                            .withTagSpecifications(getTags(ResourceType.Vpc))
                            .withCidrBlock(cidr)
            );
            vpcId = vpcResult.getVpc().getVpcId();
        } else {
            print("Loading VPC id for " + region, 0);
            vpcId = getResource(ResourceType.Vpc);
        }

        if (!alreadyCreated(ResourceType.Subnet)) {
            print("Creating subnet in " + region, 0);
            CreateSubnetResult subnetResult = ec2Client.createSubnet(
                    new CreateSubnetRequest()
                            .withTagSpecifications(getTags(ResourceType.Subnet))
                            .withVpcId(vpcId)
                            .withCidrBlock(cidr)
            );
            subnetId = subnetResult.getSubnet().getSubnetId();
        } else {
            print("Loading subnet id for " + region, 0);
            subnetId = getResource(ResourceType.Subnet);
        }

        String routeTableId;
        if (!alreadyCreated(ResourceType.RouteTable)) {
            print("Creating route table in " + region, 0);
            CreateRouteTableResult routeTableResult = ec2Client.createRouteTable(
                    new CreateRouteTableRequest()
                            .withTagSpecifications(getTags(ResourceType.RouteTable))
                            .withVpcId(vpcId)
            );
            routeTableId = routeTableResult.getRouteTable().getRouteTableId();

            print("Associating route table in " + region, 0);
            ec2Client.associateRouteTable(
                    new AssociateRouteTableRequest()
                            .withRouteTableId(routeTableId)
                            .withSubnetId(subnetId)
            );
        } else {
            print("Loading route table id for " + region, 0);
            routeTableId = getResource(ResourceType.RouteTable);
        }

        if (!alreadyCreated(ResourceType.InternetGateway)) {
            print("Creating internet gateway in " + region, 0);
            CreateInternetGatewayResult internetGatewayResult = ec2Client.createInternetGateway(
                    new CreateInternetGatewayRequest()
                            .withTagSpecifications(getTags(ResourceType.InternetGateway))
            );
            String internetGatewayId = internetGatewayResult.getInternetGateway().getInternetGatewayId();

            print("Attaching internet gateway in " + region, 0);
            AttachInternetGatewayResult attachResult = ec2Client.attachInternetGateway(
                    new AttachInternetGatewayRequest()
                            .withVpcId(vpcId)
                            .withInternetGatewayId(internetGatewayId)
            );

            print("Creating routes in " + region, 0);
            ec2Client.createRoute(
                    new CreateRouteRequest()
                            .withRouteTableId(routeTableId)
                            .withDestinationCidrBlock("0.0.0.0/0")
                            .withGatewayId(internetGatewayId)
            );
            ec2Client.createRoute(
                    new CreateRouteRequest()
                            .withRouteTableId(routeTableId)
                            .withDestinationIpv6CidrBlock("::/0")
                            .withGatewayId(internetGatewayId)
            );
        }
    }

    /**
     * This method configures the keypair, the security group and the instance
     */
    private void createEndpoints() {

        if (!alreadyCreated(ResourceType.KeyPair)) {
            print("Creating keypair in " + region, 0);
            CreateKeyPairResult keyPairResult = ec2Client.createKeyPair(
                    new CreateKeyPairRequest()
                            .withTagSpecifications(getTags(ResourceType.KeyPair))
                            .withKeyName(keyName)
            );

            print("Saving keypair for " + region, 0);
            try (BufferedWriter writer = new BufferedWriter(
                    new FileWriter(keyName + ".pem"))) {
                writer.write(keyPairResult.getKeyPair().getKeyMaterial());
            } catch (IOException ignore) {}
        } else {
            print("Loading keypair for " + region, 0);
        }

        String groupId;
        if (!alreadyCreated(ResourceType.SecurityGroup)) {
            print("Creating security group in " + region, 0);
            CreateSecurityGroupRequest createSecurityGroupRequest = new CreateSecurityGroupRequest()
                    .withTagSpecifications(getTags(ResourceType.SecurityGroup))
                    .withVpcId(vpcId)
                    .withGroupName(securityGroupName)
                    .withDescription(securityGroupName);

            CreateSecurityGroupResult securityGroupResult = ec2Client.createSecurityGroup(createSecurityGroupRequest);

            print("Adding security group ingress rules in " + region, 0);
            IpPermission allowSsh = new IpPermission()
                    .withIpProtocol("tcp")
                    .withFromPort(22)
                    .withToPort(22)
                    .withIpRanges(getMyIp());
            ec2Client.authorizeSecurityGroupIngress(
                    new AuthorizeSecurityGroupIngressRequest()
                            .withGroupId(securityGroupResult.getGroupId())
                            .withTagSpecifications(getTags(ResourceType.SecurityGroupRule))
                            .withIpPermissions(allowSsh)
            );

            groupId = securityGroupResult.getGroupId();
        } else {
            print("Loading security group for " + region, 0);
            groupId = getResource(ResourceType.SecurityGroup);
        }

        if (describeInstances("running").isEmpty() && describeInstances("stopped").isEmpty()) {
            print("Launching ec2 instance(s) in " + region, 0);
            String imageId = ec2Client.describeImages(
                    new DescribeImagesRequest()
                            .withOwners("099720109477")
                            .withFilters(
                                    new Filter("name").withValues("ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*"),
                                    new Filter("state").withValues("available"),
                                    new Filter("root-device-type").withValues("ebs"),
                                    new Filter("virtualization-type").withValues("hvm"),
                                    new Filter("architecture").withValues("x86_64")
                            )
            ).getImages().get(0).getImageId();

            List<InstanceNetworkInterfaceSpecification> interfaces = new ArrayList<InstanceNetworkInterfaceSpecification>();
            interfaces.add(new InstanceNetworkInterfaceSpecification().withAssociatePublicIpAddress(true).withDeviceIndex(0).withSubnetId(subnetId).withGroups(groupId));

            RunInstancesRequest runInstancesRequest = new RunInstancesRequest()
                    .withTagSpecifications(getTags(ResourceType.Instance))
                    .withImageId(imageId)
                    .withKeyName(keyName)
                    .withInstanceType(Main.instanceType)
                    .withMinCount(Main.instanceCount)
                    .withMaxCount(Main.instanceCount)
                    .withNetworkInterfaces(interfaces)
                    .withNetworkInterfaces(interfaces)
                    .withUserData(userData);

            RunInstancesResult runInstancesResult = ec2Client.runInstances(runInstancesRequest);

            ArrayList<String> publicIpAddresses = new ArrayList<>();
            for (Instance instance : runInstancesResult.getReservation().getInstances()) {

                DescribeInstancesRequest describeInstancesRequest = new DescribeInstancesRequest()
                        .withInstanceIds(instance.getInstanceId());
                DescribeInstancesResult describeInstancesResult = null;

                while (true) {
                    describeInstancesResult = ec2Client.describeInstances(describeInstancesRequest);
                    List<Instance> instanceList = describeInstancesResult.getReservations().get(0).getInstances();
                    String address = instanceList.get(0).getPublicIpAddress();

                    if (address != null) {
                        publicIpAddresses.add(address);
                        break;
                    } else {
                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException ignore) {
                        }
                    }
                }
            }
            addresses = publicIpAddresses;
        } else {
            print("Loading ec2 instance(s) for " + region, 0);
            addresses = new ArrayList<>();

            List<Reservation> reservations = ec2Client.describeInstances(
                    new DescribeInstancesRequest()
                            .withInstanceIds(describeInstances("running"))
            ).getReservations();
            for (Reservation reservation : reservations) {
                for (Instance instance : reservation.getInstances()) {
                    addresses.add(instance.getPublicIpAddress());
                }
            }
        }
    }

    /**
     * This method manages the endpoint configuration
     */
    private void configureEndpoints() {

        if (addresses.size() == 0) {
            return;
        }

        ArrayList<Thread> installers = new ArrayList<>();

        for(int i = 0; i < Main.instanceCount; i++) {
            installers.add(new Thread(new Installer(addresses.get(i))));
            installers.get(i).start();
        }

        for (Thread installer : installers) {
            try {
                installer.join();
            } catch (InterruptedException ignore) {}
        }
    }

    /**
     * This class configures the endpoints
     */
    private class Installer implements Runnable {
        private String address;

        public Installer(String address) {
            this.address = address;
        }

        @Override
        public void run() {
            JSch jsch = new JSch();
            Session session;

            int retryCounter = 0;
            while (true) {
                try {
                    print("Creating session to " + address, 0);
                    session = jsch.getSession("ubuntu", address, 22);
                    jsch.setConfig("StrictHostKeyChecking", "no");
                    jsch.addIdentity(keyName + ".pem");
                    session.connect();
                    break;
                } catch (JSchException sessExp) {
                    print("An error occured during session establishment with " + address + ": " + sessExp.toString(), 1);
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException intExp) {
                        print("There was an error while waiting for session establishment with " + address + ": " + intExp.toString(), 1);
                        return;
                    }
                    retryCounter += 1;
                    if (retryCounter == Main.maxRetries) {
                        print("The maximum number of retries has been reached for " + address + ".  Exiting now", 1);
                        System.exit(1);
                    }
                }
            }

            print("Transfering jar file to " + address, 0);
            ChannelSftp fileChannel;
            try {
                fileChannel = (ChannelSftp) session.openChannel("sftp");
                fileChannel.connect();
            } catch (JSchException exp) {
                print("An error occured while establishing an sftp channel with " + address + ": " + exp.toString(), 1);
                return;
            }

            try {
                fileChannel.put("jarbuster.jar", "/home/ubuntu/jarbuster.jar");
            } catch (SftpException exp) {
                print("An error occured during the sftp transfer to " + address + ": " + exp.toString(), 1);
                return;
            }

            fileChannel.disconnect();
            session.disconnect();

            print("Finished deploying " + address, 0);
        }
    }

    /**
     * This method destroys network resources
     */
    private void destroyNetwork() {
        print("Destroying network", 0);
        String internetGatewayId = getResource(ResourceType.InternetGateway);
        if (internetGatewayId != null) {
            print("Destroying internet gateway in " + region, 0);

            DescribeInternetGatewaysResult describeInternetGatewaysRequest = ec2Client.describeInternetGateways(
                    new DescribeInternetGatewaysRequest()
                            .withInternetGatewayIds(internetGatewayId)
            );

            ec2Client.detachInternetGateway(
                    new DetachInternetGatewayRequest()
                            .withInternetGatewayId(internetGatewayId)
                            .withVpcId(describeInternetGatewaysRequest.getInternetGateways().get(0).getAttachments().get(0).getVpcId())
            );

            ec2Client.deleteInternetGateway(
                    new DeleteInternetGatewayRequest()
                            .withInternetGatewayId(internetGatewayId)
            );
        }

        String routeTableId = getResource(ResourceType.RouteTable);
        if (routeTableId != null) {
            print("Destroying route table in " + region, 0);

            DescribeRouteTablesResult describeRouteTablesResult = ec2Client.describeRouteTables(
                    new DescribeRouteTablesRequest()
                            .withRouteTableIds(routeTableId)
            );

            ec2Client.disassociateRouteTable(
                    new DisassociateRouteTableRequest()
                            .withAssociationId(describeRouteTablesResult.getRouteTables().get(0).getAssociations().get(0).getRouteTableAssociationId())
            );

            ec2Client.deleteRouteTable(
                    new DeleteRouteTableRequest()
                            .withRouteTableId(routeTableId)
            );
        }

        String subnetId = getResource(ResourceType.Subnet);
        if (subnetId != null) {
            print("Destroying subnet in " + region, 0);
            ec2Client.deleteSubnet(
                    new DeleteSubnetRequest()
                            .withSubnetId(subnetId)
            );
        }

        String vpcId = getResource(ResourceType.Vpc);
        if (vpcId != null) {
            print("Destroying vpc in " + region, 0);
            ec2Client.deleteVpc(
                    new DeleteVpcRequest()
                            .withVpcId(vpcId)
            );
        }
    }

    /**
     * This method destroys endpoint resources
     */
    private void destroyEndpoints() {
        print("Destroying endpoints", 0);
        ArrayList<String> cloudbusterInstances = describeInstances("running");
        cloudbusterInstances.addAll(describeInstances("stopped"));

        if (!cloudbusterInstances.isEmpty()) {
            print("Destroying instances in " + region, 0);
            ec2Client.terminateInstances(
                    new TerminateInstancesRequest()
                            .withInstanceIds(cloudbusterInstances)
            );
            ensureInstanceState("terminated", cloudbusterInstances.size() + describeInstances("terminated").size());
        }

        String securityGroupId = getResource(ResourceType.SecurityGroup);
        if (securityGroupId != null) {
            print("Destroying security group in " + region, 0);
            DescribeSecurityGroupsResult describeSecurityGroupsResult = ec2Client.describeSecurityGroups(
                    new DescribeSecurityGroupsRequest()
                            .withGroupIds(securityGroupId)
            );

            for (IpPermission rule : describeSecurityGroupsResult.getSecurityGroups().get(0).getIpPermissions()) {
                RevokeSecurityGroupIngressRequest revokeSecurityGroupIngressRequest = new RevokeSecurityGroupIngressRequest();
                revokeSecurityGroupIngressRequest.setGroupId(securityGroupId);
                revokeSecurityGroupIngressRequest.setIpPermissions(Collections.singletonList(rule));
                ec2Client.revokeSecurityGroupIngress(revokeSecurityGroupIngressRequest);
            }

            ec2Client.deleteSecurityGroup(
                    new DeleteSecurityGroupRequest()
                            .withGroupId(securityGroupId)
            );
        }

        String keyPairId = getResource(ResourceType.KeyPair);
        if (keyPairId != null) {
            print("Destroying keypair in " + region, 0);
            DeleteKeyPairRequest deleteKeyPairRequest = new DeleteKeyPairRequest();
            deleteKeyPairRequest.setKeyPairId(keyPairId);
            ec2Client.deleteKeyPair(deleteKeyPairRequest);
        }
    }

    /**
     * This method stops running instances
     */
    private void stopEndpoints() {
        print("Searching for running instances in " + region, 0);
        ArrayList<String> instances = describeInstances("running");

        if (!instances.isEmpty()) {
            print("Stopping instances in " + region, 0);
            ec2Client.stopInstances(
                    new StopInstancesRequest()
                            .withInstanceIds(instances)
            );

            ensureInstanceState("stopped", instances.size() + describeInstances("stopped").size());
        }
    }

    /**
     * This method starts running instances
     */
    private void startEndpoints() {
        print("Searching for stopped instances in " + region, 0);
        ArrayList<String> instances = describeInstances("stopped");

        if (!instances.isEmpty()) {
            print("Starting instances in " + region, 0);
            ec2Client.startInstances(
                    new StartInstancesRequest()
                            .withInstanceIds(instances)
            );

            ensureInstanceState("running", instances.size() + describeInstances("running").size());
        }
    }

    /**
     * This method is a basic check to determine if infrastructure for this region has been created
     * @return - if infrastucture has been created
     */
    public boolean created() {
        if (getResource(ResourceType.KeyPair) != null) {
            return true;
        }
        return false;
    }

    /**
     * This method checks if cloudbuster instances are running
     * @return - if cloudbuster instances are running
     */
    public boolean running() {
        if (describeInstances("running").size() != 0) {
            return true;
        }
        return false;
    }

    /**
     * This method gets your ip address
     * @return - your ip address
     */
    private String getMyIp() {
        try {
            URL url = new URL("https://checkip.amazonaws.com");
            try {
                BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                return in.readLine() + "/32";
            } catch (IOException exp) {
                return "0.0.0.0/0";
            }
        } catch (MalformedURLException exp) {
            return "0.0.0.0/0";
        }
    }

    /**
     * This method describes cloudbuster instances of a given state
     * @param state - the state to look for=
     * @return - the instance ids of matching instances
     */
    private ArrayList<String> describeInstances(String state) {
        List<Reservation> reservations = ec2Client.describeInstances(
                new DescribeInstancesRequest()
                        .withFilters(new Filter("instance-state-name", Arrays.asList(state)))
                        .withFilters(new Filter("tag-key", Arrays.asList(tagKey)))
                        .withFilters(new Filter("tag-value", Arrays.asList(tagValue)))
        ).getReservations();

        ArrayList<String> instances = new ArrayList<>();
        for (Reservation reservation : reservations) {
            for (Instance instance : reservation.getInstances()) {
                instances.add(instance.getInstanceId());
            }
        }

        return instances;
    }

    /**
     * This method blocks until a specific number of instances reach a certain state
     * @param state - the desired state
     * @param count - the number of instances required in this state
     */
    private void ensureInstanceState(String state, int count) {
        while (true) {
            if (describeInstances(state).size() == count) {
                break;
            } else {
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException ignore) {}
            }
        }
    }

    /**
     * This is a method to get a tag object for a given resource type
     * @param resourceType - the resource type that is being tagged
     * @return - a tag pair
     */
    private TagSpecification getTags(ResourceType resourceType) {
        return new TagSpecification()
                .withResourceType(resourceType)
                .withTags(new Tag(tagKey, tagValue));
    }

    /**
     * This method checks if a needed cloudbuster resource has already been created
     * @param resourceType - the resource type to check
     * @return - if the resource has been created or not
     */
    private boolean alreadyCreated(ResourceType resourceType) {
       DescribeTagsResult describeTagsRequest= ec2Client.describeTags(
               new DescribeTagsRequest()
                       .withFilters(new Filter("key", Arrays.asList(tagKey)))
                       .withFilters(new Filter("value", Arrays.asList(tagValue)))
                       .withFilters(new Filter("resource-type", Arrays.asList(resourceType.toString())))
       );

       if (describeTagsRequest.getTags().isEmpty()) {
           return false;
        }
       return true;
    }

    /**
     * This method gets the instance id of a cloudbuster resource
     */
    private String getResource(ResourceType resourceType) {
        DescribeTagsResult describeTagsRequest= ec2Client.describeTags(
                new DescribeTagsRequest()
                        .withFilters(new Filter("key", Arrays.asList(tagKey)))
                        .withFilters(new Filter("value", Arrays.asList(tagValue)))
                        .withFilters(new Filter("resource-type", Arrays.asList(resourceType.toString())))
        );

        if (describeTagsRequest.getTags().size() == 0) {
            return null;
        }

        return describeTagsRequest.getTags().get(0).getResourceId();
    }
}
